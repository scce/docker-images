#!/usr/bin/env python3
import argparse

from workbench.command import backup, check, init, restore, up, seed_db, seed_fs, test, clean_db


def configure_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument("--verbose", action="store_true")
    commands = parser.add_subparsers(dest='command')
    commands.add_parser('backup')
    commands.add_parser('check')
    commands.add_parser('init')
    commands.add_parser('restore')
    commands.add_parser('up')
    commands.add_parser('clean-db')
    seed_db_parser = commands.add_parser('seed-db')
    seed_db_parser.add_argument('--seed', type=int)
    seed_fs_parser = commands.add_parser('seed-fs')
    seed_fs_parser.add_argument('--seed', type=int)
    test_parser = commands.add_parser('test')
    test_parser.add_argument('--seed', type=int)
    return parser


def execute_command(args):
    if args.command == 'backup':
        backup(args)
    elif args.command == 'check':
        check(args)
    elif args.command == 'init':
        init(args)
    elif args.command == 'restore':
        restore(args)
    elif args.command == 'up':
        up(args)
    elif args.command == 'clean-db':
        clean_db(args)
    elif args.command == 'seed-db':
        seed_db(args)
    elif args.command == 'seed-fs':
        seed_fs(args)
    elif args.command == 'test':
        test(args)


execute_command(configure_parser().parse_args())
