#!/usr/bin/env python3
import argparse
import os
from faker import Faker
from random import randint, Random
from pprint import pprint
from dotenv import dotenv_values
import psycopg2

def configure_parser():
    parser = argparse.ArgumentParser()
    commands = parser.add_subparsers(dest='command')
    commands.add_parser('backup')
    commands.add_parser('check')
    commands.add_parser('init')
    commands.add_parser('restore')
    commands.add_parser('up')
    commands.add_parser('clean-db')
    seed_db_parser = commands.add_parser('seed-db')
    seed_db_parser.add_argument('--seed', type=int)
    seed_directory_parser = commands.add_parser('seed-directory')
    seed_directory_parser.add_argument('--seed', type=int)
    return parser


def execute_command(args):
    docker_compose = 'docker-compose %s'
    stop = docker_compose % 'stop %s'
    rm_f = docker_compose % 'rm -f %s'
    up_d = docker_compose % 'up -d %s'
    run_backup = docker_compose % 'run --rm backup "--%s"'

    if args.command == 'backup':
        os.system(run_backup % args.command)
    elif args.command == 'check':
        os.system(run_backup % args.command)
    elif args.command == 'init':
        os.system(run_backup % args.command)
    elif args.command == 'restore':
        os.system(run_backup % args.command)
    elif args.command == 'up':
        os.system(docker_compose % args.command)
    elif args.command == 'clean-db':
        postgres_container = 'postgres'
        os.system(stop % postgres_container)
        os.system(rm_f % postgres_container)
        os.system(up_d % postgres_container)
    elif args.command == 'seed-db':
        seed_db(args)
    elif args.command == 'seed-directory':
        seed_directory(args)


def seed_db(args):
    seed = resolve_seed(args)
    tables = generate_test_data(seed)
    connection = open_database_connection()
    cursor = connection.cursor()
    create_test_database(cursor, tables)
    connection.commit()
    connection.close()


def generate_test_data(seed):
    random = Random(seed)
    faker = Faker('de_DE')
    faker.seed(seed)
    column_types = [
        {"type": "text", "faker": faker.name},
        {"type": "integer", "faker": faker.pyint},
        {"type": "boolean", "faker": faker.pybool},
        {"type": "real", "faker": faker.pyfloat}
    ]
    tables = []
    n = 10
    for i in range(random.randint(0, n)):
        column_headers = [random.choice(column_types)
                          for j in range(random.randint(1, n))]
        rows = [[header["faker"]() for header in column_headers]
                for k in range(random.randint(0, n))]
        tables.append({
            "column_headers": [header["type"] for header in column_headers],
            "rows": rows
        })
    return tables


def open_database_connection():
    config = dotenv_values()
    return psycopg2.connect(
        host=config["POSTGRES_HOST"],
        port=config["POSTGRES_PORT"],
        dbname=config["POSTGRES_DB"],
        user=config["POSTGRES_USER"],
        password=config["POSTGRES_PASSWORD"]
    )


def create_test_database(cursor, tables):
    for (i, table) in enumerate(tables):
        table_name = f"test{i}"
        columns_statement = ", ".join(
            [f"test{j} {header}"
             for (j, header) in enumerate(table["column_headers"])]
        )
        table_statement = f"create table {table_name} ({columns_statement});"
        cursor.execute(table_statement)
        for row in table["rows"]:
            values_statement = ", ".join(["%s"] * len(row))
            insert_statement = f"insert into {table_name} values ({values_statement});"
            cursor.execute(insert_statement, row)


def seed_directory(args):
    seed = resolve_seed(args)
    random = Random(seed)
    pprint(generate_directories(random, 1.0))


def generate_directories(random, probability):
    return [
        {
            "name": f"folder{i}",
            "files": {f"file{i}": "Lorem Ipsum"
                      for i in range(random.randint(0, 10))},
            "children": generate_directories(random, probability / 2)
        }
        for i in range(random.randint(0, 4))
    ] if random.random() < probability else []


def resolve_seed(args):
    seed = args.seed if args.seed is not None else randint(0, 999999)
    print(f"Seed: {seed}")
    return seed


execute_command(configure_parser().parse_args())
